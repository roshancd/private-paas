/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.stratos.autoscaler.rule;

import org.apache.stratos.messaging.domain.topology.Service;
import org.apache.stratos.messaging.domain.topology.Cluster;
import org.apache.stratos.autoscaler.AutoscalerContext;
import org.apache.stratos.autoscaler.MemberStatsContext;
import org.apache.stratos.autoscaler.Constants;
import org.apache.stratos.autoscaler.NetworkPartitionContext;
import org.apache.stratos.autoscaler.policy.PolicyManager;
import org.apache.stratos.autoscaler.policy.model.AutoscalePolicy;
import org.apache.stratos.autoscaler.deployment.policy.DeploymentPolicy;
import org.apache.stratos.autoscaler.policy.model.RequestsInFlight;
import org.apache.stratos.autoscaler.policy.model.LoadThresholds;
import org.apache.stratos.autoscaler.policy.model.MemoryConsumption;
import org.apache.stratos.autoscaler.policy.model.LoadAverage;
import org.apache.stratos.autoscaler.client.cloud.controller.CloudControllerClient;
import org.apache.stratos.autoscaler.algorithm.AutoscaleAlgorithm;
import org.apache.stratos.autoscaler.algorithm.OneAfterAnother;
import org.apache.stratos.autoscaler.algorithm.RoundRobin;
import org.apache.stratos.autoscaler.PartitionContext;
import org.apache.stratos.autoscaler.rule.AutoscalerRuleEvaluator;
import org.apache.stratos.autoscaler.partition.PartitionGroup;
import org.apache.stratos.cloud.controller.stub.deployment.partition.Partition;
import org.apache.stratos.cloud.controller.stub.pojo.MemberContext;

import org.apache.stratos.autoscaler.policy.model.LoadAverage
import org.apache.stratos.autoscaler.policy.model.MemoryConsumption

global org.apache.stratos.autoscaler.rule.RuleLog log;
global org.apache.stratos.autoscaler.rule.RuleTasksDelegator $delegator;
global org.apache.stratos.autoscaler.policy.model.AutoscalePolicy autoscalePolicy;
global java.lang.String clusterId;
global java.lang.String lbRef;
global java.lang.Boolean rifReset;
global java.lang.Boolean mcReset;
global java.lang.Boolean laReset;
global java.lang.Boolean isPrimary;
global java.util.List primaryMembers;

rule "Scaling Rule"
dialect "mvel"
	when
        $networkPartitionContext : NetworkPartitionContext ()

        $loadThresholds : LoadThresholds() from  autoscalePolicy.getLoadThresholds()
	    algorithmName : String() from $networkPartitionContext.getPartitionAlgorithm();
        autoscaleAlgorithm : AutoscaleAlgorithm() from  $delegator.getAutoscaleAlgorithm(algorithmName)

        eval(log.debug("Running scale up rule: [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId))
        eval(log.debug("[scaling] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " Algorithm name: " + algorithmName))
        eval(log.debug("[scaling] [network-partition] " + $networkPartitionContext.getId() + " [cluster] " + clusterId + " Algorithm: " + autoscaleAlgorithm))

	
        rifUpperLimit : Float() from  $loadThresholds.getRequestsInFlight().getUpperLimit()
        rifLowerLimit : Float() from  $loadThresholds.getRequestsInFlight().getLowerLimit()

        rifAverage : Float() from  $networkPartitionContext.getAverageRequestsInFlight()
        rifGradient : Float() from  $networkPartitionContext.getRequestsInFlightGradient()
        rifSecondDerivative : Float() from  $networkPartitionContext.getRequestsInFlightSecondDerivative()
	    rifPredictedValue : Double() from $delegator.getPredictedValueForNextMinute(rifAverage, rifGradient, rifSecondDerivative, 1)

        mcUpperLimit : Float() from  $loadThresholds.getMemoryConsumption().getUpperLimit()
        mcLowerLimit : Float() from  $loadThresholds.getMemoryConsumption().getLowerLimit()

	    mcPredictedValue : Double() from $delegator.getMemoryConsumptionPredictedValue($networkPartitionContext)

        laUpperLimit : Float() from  $loadThresholds.getLoadAverage().getUpperLimit()
        laLowerLimit : Float() from  $loadThresholds.getLoadAverage().getLowerLimit()

	    laPredictedValue : Double() from $delegator.getLoadAveragePredictedValue($networkPartitionContext)

        scaleUp : Boolean() from ((rifReset && (rifPredictedValue > rifUpperLimit)) || (mcReset && (mcPredictedValue > mcUpperLimit)) || (laReset && (laPredictedValue > laUpperLimit)))
        scaleDown : Boolean() from ((rifReset && (rifPredictedValue < rifLowerLimit )) && (mcReset && (mcPredictedValue < mcLowerLimit)) && (laReset && (laPredictedValue < laLowerLimit)))

        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " RIF Resetted?: " + rifReset))
        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " RIF predicted value: " + rifPredictedValue))
        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " RIF upper limit: " + rifUpperLimit))
        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " RIF lower limit: " + rifLowerLimit))

        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " MC Resetted?: " + mcReset))
        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " MC predicted value: " + mcPredictedValue))
        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " MC upper limit: " + mcUpperLimit))
        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " MC lower limit: " + mcLowerLimit))

        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " LA Resetted?: " + laReset))
        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " LA predicted value: " + laPredictedValue))
        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " LA upper limit: " + laUpperLimit))
        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " LA lower limit: " + laLowerLimit))

        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " Scale-up action: " + scaleUp))
        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " Scale-down action: " + scaleDown))

	then
        if(scaleUp){

            $networkPartitionContext.resetScaleDownRequestsCount();
            Partition partition =  autoscaleAlgorithm.getNextScaleUpPartition($networkPartitionContext, clusterId);
            if(partition != null){
                log.info("[scale-up] Partition available, hence trying to spawn an instance to scale up!" );
                log.debug("[scale-up] " + " [partition] " + partition.getId() + " [cluster] " + clusterId );
                $delegator.delegateSpawn($networkPartitionContext.getPartitionCtxt(partition.getId()), clusterId, lbRef, isPrimary);
            }
        } else if(scaleDown){

            log.debug("[scale-down] Decided to Scale down [cluster] " + clusterId);
            if($networkPartitionContext.getScaleDownRequestsCount() > 5 ){
                log.debug("[scale-down] Reached scale down requests threshold [cluster] " + clusterId + " Count " + $networkPartitionContext.getScaleDownRequestsCount());
                $networkPartitionContext.resetScaleDownRequestsCount();
                MemberStatsContext selectedMemberStatsContext = null;
                double lowestOverallLoad = 0.0;
                boolean foundAValue = false;
                Partition partition =  autoscaleAlgorithm.getNextScaleDownPartition($networkPartitionContext, clusterId);
                if(partition != null){
                    log.info("[scale-down] Partition available to scale down ");
                    log.debug("[scale-down] " + " [partition] " + partition.getId() + " [cluster] " + clusterId);
                    partitionContext = $networkPartitionContext.getPartitionCtxt(partition.getId());


					// In partition context member stat context, all the primary members need to be
					// avoided being selected as the member to terminated
					

                    for(MemberStatsContext memberStatsContext: partitionContext.getMemberStatsContexts().values()){
					
						if( !primaryMembers.contains(memberStatsContext.getMemberId()) ) {
						
                        LoadAverage loadAverage = memberStatsContext.getLoadAverage();
                        log.debug("[scale-down] " + " [cluster] "
                            + clusterId + " [member] " + memberStatsContext.getMemberId() + " Load average: " + loadAverage);

                        MemoryConsumption memoryConsumption = memberStatsContext.getMemoryConsumption();
                        log.debug("[scale-down] " + " [partition] " + partition.getId() + " [cluster] "
                            + clusterId + " [member] " + memberStatsContext.getMemberId() + " Memory consumption: " + memoryConsumption);

                        double predictedCpu = $delegator.getPredictedValueForNextMinute(loadAverage.getAverage(),loadAverage.getGradient(),loadAverage.getSecondDerivative(), 1);
                        log.debug("[scale-down] " + " [partition] " + partition.getId() + " [cluster] "
                            + clusterId + " [member] " + memberStatsContext.getMemberId() + " Predicted CPU: " + predictedCpu);

                        double predictedMemoryConsumption = $delegator.getPredictedValueForNextMinute(memoryConsumption.getAverage(),memoryConsumption.getGradient(),memoryConsumption.getSecondDerivative(), 1);
                        log.debug("[scale-down] " + " [partition] " + partition.getId() + " [cluster] "
                            + clusterId + " [member] " + memberStatsContext.getMemberId() + " Predicted memory consumption: " + predictedMemoryConsumption);

                        double overallLoad = (predictedCpu + predictedMemoryConsumption) / 2;
                        log.debug("[scale-down] " + " [partition] " + partition.getId() + " [cluster] "
                            + clusterId + " [member] " + memberStatsContext.getMemberId() + " Overall load: " + overallLoad);

                        if(!foundAValue){
                            foundAValue = true;
                            selectedMemberStatsContext = memberStatsContext;
                            lowestOverallLoad = overallLoad;
                        } else if(overallLoad < lowestOverallLoad){
                            selectedMemberStatsContext = memberStatsContext;
                            lowestOverallLoad = overallLoad;
                        }
                        
                        							
					  }
						
                    }
                    if(selectedMemberStatsContext != null) {
                        log.info("[scale-down] Trying to terminating an instace to scale down!" );
                        log.debug("[scale-down] " + " [partition] " + partition.getId() + " [cluster] "
                            + clusterId + " Member with lowest overall load: " + selectedMemberStatsContext.getMemberId());

                        $delegator.delegateTerminate(partitionContext, selectedMemberStatsContext.getMemberId());
                    }
                }
            } else{
                 log.debug("[scale-down] Not reached scale down requests threshold. " + clusterId + " Count " + $networkPartitionContext.getScaleDownRequestsCount());
                 $networkPartitionContext.increaseScaleDownRequestsCount();

             }
        }  else{
            log.debug("[scaling] No decision made to either scale up or scale down ... ");

        }

end




